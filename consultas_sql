
CONSULTAS

	1) DADO UM ID DE LIVRO, EXIBIR OS EXEMPLARES DISPONÍVEIS PARA LOCAÇÃO E AS RESPECTIVAS SEÇÕES E BIBLIOTECAS.
		UTILIDADE: AUXILIAR O USUÁRIO A ENCONTRAR O LIVRO DENTRO DO GRUPO DE BIBLIOTECAS

SELECT 
    l.titulo,
    b.nome as biblioteca,
    s.nome as secao,
    count(e.id) as quantidade_disponivel
FROM
    biblioteca b
    left outer join secao_biblioteca sb on sb.biblioteca_id = b.id
    left outer join secao s on sb.secao_id = s.id
    left outer join exemplar e on e.secao_biblioteca_id = sb.id
    left outer join livro l on e.livro_id = l.id
WHERE
    l.id = 1
    and e.status = 'devolvido'
GROUP BY
    b.id
ORDER BY
    quantidade_disponivel DESC



	2) VALOR TOTAL DA MULTA DEVIDA POR DETERMINADO USUÁRIO AO GRUPO DE BIBLIOTECAS, DISCRIMINANDO O TOTAL DEVIDO PARA CADA BIBLIOTECA. (GROUP BY)
		UTILIDADE: PERMITIR QUE QUALQUER BIBLIOTECA DO GRUPO FORNEÇA UMA CERTIDAO DE NADA CONSTA AO USUÁRIO, CASO ELE NÃO ESTEJA EM DÉBITO

SELECT
    q1.biblioteca,
    sum(q1.debito_restante) as debito
FROM
(
    # Retorna o debito restante de cada emprestimo do usuario
    SELECT
        e.id as emprestimo_id,
        e.valor_multa as valor_multa_devida,
        sum(m.valor) as valor_multa_paga,
        e.valor_multa - sum(m.valor) as debito_restante,
        b.nome as biblioteca
    FROM
        emprestimo e
        left outer join multa m on m.emprestimo_id = e.id
        left outer join exemplar ex on e.exemplar_id = ex.id
        left outer join secao_biblioteca sb on ex.secao_biblioteca_id = sb.id
        left outer join biblioteca b on sb.biblioteca_id = b.id
    WHERE
        e.usuario_id = 3
    GROUP BY
        e.id
) q1
GROUP BY
	q1.biblioteca


    
	3) DADO UM ID DE LIVRO, RETORNAR A MÉDIA DE IDADE DOS USUÁRIOS QUE PEGARAM O LIVRO NO GRUPO DE BIBLIOTECAS
		UTILIDADE: LEVANTAMENTO DE PREFERENCIAS/PERFIL DOS USUÁRIOS

SELECT
	avg(query_idades.idade) as media_idade
FROM
(
    SELECT
        u.nome,
        TIMESTAMPDIFF(YEAR, u.data_nascimento, CURRENT_DATE) as idade
    FROM
        usuario u
        left outer join emprestimo e on e.usuario_id = u.id
        left outer join exemplar ex on e.exemplar_id = ex.id
        left outer join livro l on ex.livro_id = l.id
    WHERE
        l.id = 15
    GROUP BY
        u.id
) query_idades



	4) DADO UM ID DE EXEMPLAR, RETORNAR O NOME E O EMAIL DO USUÁRIOS COM RESERVA ATIVA PARA O MESMO ALEM DA DATA DE RESERVA E STATUS DA RESERVA, ORDENADOS POR DATA DE RESERVA.
		UTILIDADE: AVISAR O USUÁRIO DO TOPO DA LISTA ASSIM QUE O EXEMPLAR ESTIVER DISPONÍVEL NA BIBLIOTECA.

SELECT
    u.nome as usuario,
    u.email as email,
    r.data as data_reserva,
    r.status as status_reserva
FROM
    usuario u
    left outer join reserva r on r.usuario_id = u.id
    left outer join exemplar ex on r.exemplar_id = ex.id
    left outer join livro l on ex.livro_id = l.id
WHERE
    ex.id = 1
ORDER BY
    r.data ASC
	
	

	5) DADO UM ID DE BIBLIOTECA, RETORNAR OS VALORES RECEBIDOS PELOS FUNCIONARIOS DA BIBLIOTECA NO DIA ATUAL.
		UTILIDADE: PRESTAÇÃO DE CONTAS DO VALOR RECEBIDO DURANTE O DIA.

SELECT
	f.nome,
    sum(m.valor)
FROM
	multa m
    left outer join funcionario f on m.funcionario_id = f.id
WHERE
	f.id in 
    (
        SELECT 
        	fu.id 
        FROM 
        	funcionario fu
        	left outer join departamento de on fu.departamento_id = de.id
        	left outer join biblioteca bi on de.biblioteca_id = bi.id
        WHERE
        	bi.id = 2
    )
    and m.data_recebimento = CURRENT_DATE
GROUP BY
	f.id
ORDER BY
	f.nome




	6) TOP 5 EDITORAS DO GRUPO (CONSIDERANDO EMPRÉSTIMOS DE SEUS LIVROS NO ÚLTIMO ANO).
		UTILIDADE: VERIFICAR QUAIS SÃO AS EDITORAS QUE FORNECEM OS LIVROS QUE MAIS AGRADAM OS USUÁRIOS

SELECT
    ed.nome as editora,
    count(e.id) as quantidade_emprestimos
FROM
    editora ed
    left outer join livro l on l.editora_id = ed.id
    right outer join exemplar ex on ex.livro_id = l.id
    right outer join emprestimo e on e.exemplar_id = ex.id 
WHERE
	e.data_emprestimo >= adddate(CURRENT_DATE, INTERVAL -1 year)
GROUP BY
	ed.id
ORDER BY
	count(e.id) DESC
LIMIT
	5


	7) DADO UM ID DE BIBLIOTECA, RETORNAR OS IDS DE EXEMPLARES DEVOLVIDOS NO DIA ATUAL PARA OS QUAIS NÃO EXISTEM RESERVAS ATIVAS E O NOME DE SUAS RESPECTIVAS SEÇÕES
		UTILIDADE: NO FIM DO EXPEDIENTE, DEVOLVER À PRTAELEIRA OS LIVROS QUE NÃO POSSUEM RESERVA.

SELECT
    ex.id as exemplar_id,
    s.nome as secao
FROM
    exemplar ex
    left outer join emprestimo e on e.exemplar_id = ex.id
    left outer join secao_biblioteca sb on ex.secao_biblioteca_id = sb.id
    left outer join secao s on sb.secao_id = s.id
    left outer join biblioteca b on sb.biblioteca_id = b.id
WHERE
	e.data_devolucao = (CURRENT_DATE)
	and b.nome like 'Berger'
	and not exists
    (
        SELECT
        	r.id
        FROM
        	reserva r
        WHERE
        	r.exemplar_id = ex.id
            and r.status = 'ativa'
    )


	
	8)  DADO UM ID DE USUÁRIO, RETORNAR OS EMPRÉSTIMOS ATIVOS DO USUÁRIO, INDICANDO NOME DO LIVRO, CÓDIGO DO EXEMPLAR, DATA DE EMPRESTIMO, DATA PREVISTA DE DEVOLUÇÃO E NOME DA BIBLIOTECA.
		UTILIDADE: FORNECER ESTAS INFORMAÇÕES NO PORTAL DO USUÁRIO, PARA QUE ELE TENHA CONTROLE DOS PRAZOS DE CADA EMPRESTIMO
	
SELECT
    u.nome as usuario,
    l.titulo as livro,
    ex.id as exemplar_id,
    e.data_emprestimo as data_emprestimo,
    adddate(e.data_emprestimo, INTERVAL b.emprestimo_dias day) as data_prevista_devolucao,
    b.nome as biblioteca
FROM
    emprestimo e
    left outer join usuario u on e.usuario_id = u.id
    left outer join exemplar ex on e.exemplar_id = ex.id
    left outer join livro l on ex.livro_id = l.id
    left outer join secao_biblioteca sb on ex.secao_biblioteca_id = sb.id
    left outer join biblioteca b on sb.biblioteca_id = b.id
WHERE
    u.id = 3
    and e.data_devolucao is null
ORDER BY
    l.titulo	
	
	
		
	9) RETORNAR O TÍTULO DOS LIVROS QUE NO ULTIMO ANO NÃO FORAM EMPRESTADOS, CONSIDERANDO TODAS AS BIBLIOTECAS 
		UTILIDADE: VERIFICAR POSSIBILIDADE DE ENVIAR LIVRO PARA SEÇÃO "MORTA"

SELECT
    l.titulo
FROM
	livro l
WHERE
	not exists
    (
        SELECT
        	*
        FROM
        	emprestimo e
        	left outer join exemplar ex on e.exemplar_id = ex.id
        WHERE
        	ex.livro_id = l.id
        	and e.data_emprestimo >= adddate(CURRENT_DATE, INTERVAL -1 year) 
    )

	
	10) DADO UM ID DE USUÁRIO, RETORNAR UMA LISTA COM TODAS AS SEÇÕES DE LIVROS QUE O USUÁRIO JÁ PEGOU, ORDENADAS POR NÚMERO DE EMPRÉSTIMOS REALIZADOS PARA ESTE USUÁRIO
		UTILIDADE: VERIFICAR AS SEÇÕES PREFERIDAS E FORNECER SUGESTÕES DE OUTROS LIVROS

SELECT
    s.nome as secao,
    count(e.id) as emprestimos_realizados
FROM
    secao s
    left outer join secao_biblioteca sb on sb.secao_id = s.id
    left outer join exemplar ex on ex.secao_biblioteca_id = sb.id
    left outer join emprestimo e on e.exemplar_id = ex.id
    left outer join usuario u on e.usuario_id = u.id
WHERE
    u.id = 3
GROUP BY
    s.id
ORDER BY
    count(e.id) DESC
	

	
	11) DADO UM CONJUNTO DE PALAVRAS-CHAVE, RETORNAR OS LIVROS QUE CONTÉM AO MENOS UMA DELAS
		UTILIDADE: PESQUISA DE LIVROS

SELECT
    l.titulo as livro,
    l.ano as ano,
    e.nome as editora,
    pc.palavra as palavra
FROM
    livro l
    left outer join editora e on l.editora_id = e.id
    left outer join palavra_chave_livro pcl on pcl.livro_id = l.id
    left outer join palavra_chave pc on pcl.palavra_chave_id = pc.id
WHERE
    pc.palavra in ('leão', 'informação')
ORDER BY 
    l.titulo ASC


		
	12) DADA UM ID DE BIBLIOTECA, RETORNAR O NOME DOS LIVROS QUE FORAM EMPRESTADOS NA DATA ATUAL E SUAS RESPECTIVAS QUANTIDADES
		UTILIDADE: AUDITORIA DE EMPRÉSTIMOS

SELECT
    e.data_emprestimo as data_emprestimo,
    l.titulo as livro,
    count(e.id) as quantidade_emprestimos_realizados
FROM
    emprestimo e
    left outer join exemplar ex on e.exemplar_id = ex.id
    left outer join livro l on ex.livro_id = l.id
    left outer join secao_biblioteca sb on ex.secao_biblioteca_id = sb.id
    left outer join biblioteca b on sb.biblioteca_id = b.id
WHERE
    e.data_emprestimo = CURRENT_DATE
    and b.id = 2
GROUP BY
    l.titulo
ORDER BY
	l.titulo


		
	13) RETORNAR O NOME E A QUANTIDADE DE FUNCIONARIOS DAS BIBLIOTECAS QUE POSSUEM MAIS DE UM FUNCIONÁRIO
		UTILIDADE: BALANÇO
		
SELECT
    b.nome as biblioteca,
    count(f.id) as quantidade_funcionarios
FROM
	funcionario f
    left outer join departamento d on f.departamento_id = d.id
    left outer join biblioteca b on d.biblioteca_id = b.id
GROUP BY
	b.id
HAVING
	count(f.id) > 1
	
	
	
	14) RETORNAR O NOME E A QUANTIDADE DE EXEMPLARES DAS BIBLIOTECAS QUE POSSUEM MAIS DE UM EXEMPLAR
		UTILIDADE: BALANÇO PATRIMONIAL

SELECT
    b.nome as biblioteca,
    count(e.id) as quantidade_exemplares
FROM
    exemplar e
    left outer join secao_biblioteca sb on e.secao_biblioteca_id = sb.id
    left outer join biblioteca b on sb.biblioteca_id = b.id
GROUP BY
    b.id
HAVING
    count(e.id) > 1


	
	15) BIBLIOTECA MAIS POPULAR (MÉDIA DE EMPRÉSTIMOS POR USUÁRIO, OU SEJA, QUANT. DE EMPRESTIMOS / QUANT. DE USUÁRIOS)
		UTILIDADE: ESTATÍSTICAS - COMPARAR AS BIBLIOTECAS DO GRUPO 

SELECT
    b.nome as biblioteca,
    coalesce(query_emprestimos.quantidade_emprestimos, 0) as quantidade_emprestimos,
    coalesce(query_usuarios.quantidade_usuarios_ativos, 0) as quantidade_usuarios,
    coalesce(query_emprestimos.quantidade_emprestimos, 0) / 
    coalesce(query_usuarios.quantidade_usuarios_ativos, 0) as emprestimos_por_usuario
FROM
    biblioteca b
    left outer join
    (
        # Quantidade de usuarios ativos por biblioteca
        SELECT
            b.id as biblioteca_id,
            count(u.id) as quantidade_usuarios_ativos
        FROM
            usuario u
            left outer join usuario_biblioteca ub on ub.usuario_id = u.id
            left outer join biblioteca b on ub.biblioteca_id = b.id
        WHERE
            u.status = 'ativo'
        GROUP BY
            b.id
    ) query_usuarios on b.id = query_usuarios.biblioteca_id
    left outer join
    (
	   # Quantidade de emprestimos por biblioteca (considerando o ultimo ano)
        SELECT
            b.id as biblioteca_id,
            count(e.id) as quantidade_emprestimos
        FROM
            emprestimo e
            left outer join exemplar ex on e.exemplar_id = ex.id
            left outer join secao_biblioteca sb on ex.secao_biblioteca_id = sb.id
            left outer join biblioteca b on sb.biblioteca_id = b.id
        WHERE
            e.data_emprestimo >= adddate(CURRENT_DATE, INTERVAL -1 year)
        GROUP BY
            b.id
    ) query_emprestimos on b.id = query_emprestimos.biblioteca_id
WHERE
	query_usuarios.quantidade_usuarios_ativos > 0	
ORDER BY
    emprestimos_por_usuario DESC
		
		

